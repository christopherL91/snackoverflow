(function () {
'use strict';

const sendCommand = (socket, command) => {
		//TODO socket stuff for sending commands
		socket.send(command);
		//console.log(command);
};

const createCommand = charName => {
		//{"command": "create", "name": <charName>}
		return JSON.stringify({ command: "create", name: charName });
};

const moveCommand = (CharName, x, y) => {
		//{"command": "move", "name": <charName>, "dx": [-1, 0, 1], "dy": [-1, 0, 1]}
		return JSON.stringify({ command: "move", name: CharName, dx: x, dy: y });
};

const scanCommand = CharName => {
		//{"command": "scan", "name": <charName>}
		return JSON.stringify({ command: "scan", name: CharName });
};

const setupKeyEvents = socket => {
		// listen for the "keypress" event
		document.onkeypress = function (e) {
				const charCode = typeof e.which == "number" ? e.which : e.keyCode;
				const key = charCode ? String.fromCharCode(charCode) : undefined;
				let playerName = 'ducky';
				if (key == 'q') {
						sendCommand(socket, moveCommand(playerName, -1, -1));
				} else if (key === 'w') {
						sendCommand(socket, moveCommand(playerName, 0, -1));
				} else if (key === 'e') {
						sendCommand(socket, moveCommand(playerName, 1, -1));
				} else if (key === 'a') {
						sendCommand(socket, moveCommand(playerName, -1, 0));
				} else if (key === 'd') {
						sendCommand(socket, moveCommand(playerName, 1, 0));
				} else if (key === 'z') {
						sendCommand(socket, moveCommand(playerName, -1, 1));
				} else if (key === 'x') {
						sendCommand(socket, moveCommand(playerName, 0, 1));
				} else if (key === 'c') {
						sendCommand(socket, moveCommand(playerName, 1, 1));
				} else if (key === 's') {
						sendCommand(socket, scanCommand(playerName));
				} else if (key === 'k') {
						sendCommand(socket, createCommand(playerName));
				}
		};
};

const statusOK = response => {
	if (response.status >= 200 && response.status < 300) {
		return response.json();
	} else {
		return Promise.reject();
	}
};

const getData = url => {
	return fetch(url, {
		method: "GET",
		headers: {
			"Content-Type": "application/json"
		}
	}).then(response => statusOK(response)).catch(error => {
		console.log(`Error: ${ error }`);
	});
};

const init = url => {
	const socketUrl = `ws://localhost:3000/ws`;
	const socket = new WebSocket(socketUrl);
	setupKeyEvents(socket);

	getData(url).then(data => {
		let dungeonmap = '';
		const { Area } = data;

		for (let i = 0; i < Area.length; i++) {
			for (let j = 0; j < Area[i].length; j++) {
				if (Area[i][j] == 1) {
					dungeonmap += '■';
				} else {
					dungeonmap += '□';
				}
			}
			dungeonmap += "<br/>";
		}
		const node = document.getElementById('map');
		node.innerHTML = dungeonmap;
	});
};

init('http://localhost:3000');

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
