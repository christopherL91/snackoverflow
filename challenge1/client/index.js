(function () {
'use strict';

const sendCommand = command => {
	//TODO socket stuff for sending commands
	console.log(command);
};

const createCommand = charName => {
	//{"command": "create", "name": <charName>}
	return JSON.stringify({ command: "create", name: charName });
};

const moveCommand = (CharName, x, y) => {
	//{"command": "move", "name": <charName>, "dx": [-1, 0, 1], "dy": [-1, 0, 1]}
	return JSON.stringify({ command: "move", name: CharName, dx: x, dy: y });
};

const scanCommand = CharName => {
	//{"command": "scan", "name": <charName>}
	return JSON.stringify({ command: "scan", name: CharName });
};

// listen for the "keypress" event
document.onkeypress = function (e) {
	const charCode = typeof e.which == "number" ? e.which : e.keyCode;
	const key = charCode ? String.fromCharCode(charCode) : undefined;
	let playerName = 'ducky';
	if (key == 'q') {
		sendCommand(moveCommand(playerName, -1, -1));
	} else if (key === 'w') {
		sendCommand(moveCommand(playerName, 0, -1));
	} else if (key === 'e') {
		sendCommand(moveCommand(playerName, 1, -1));
	} else if (key === 'a') {
		sendCommand(moveCommand(playerName, -1, 0));
	} else if (key === 'd') {
		sendCommand(moveCommand(playerName, 1, 0));
	} else if (key === 'z') {
		sendCommand(moveCommand(playerName, -1, 1));
	} else if (key === 'x') {
		sendCommand(moveCommand(playerName, 0, 1));
	} else if (key === 'c') {
		sendCommand(moveCommand(playerName, 1, 1));
	} else if (key === 's') {
		sendCommand(scanCommand(playerName));
	} else if (key === 'k') {
		sendCommand(createCommand(playerName));
		drawDude(sendCommand(scanCommand(playerName)));
	}
};

const statusOK = response => {
	if (response.status >= 200 && response.status < 300) {
		return response.json();
	} else {
		return Promise.reject();
	}
};

const getData = url => {
	return fetch(url, {
		method: "GET",
		headers: {
			"Content-Type": "application/json"
		}
	}).then(response => statusOK(response)).catch(error => {
		console.log(`Error: ${ error }`);
	});
};

getData('http://localhost:3000').then(data => {
	let dungeonmap = '';
	const { Area } = data;
	let canvas = document.getElementById("canvas");
	const width = Area.length;
	const height = Area[1].length;
	const mult = 20;
	canvas.setAttribute('width', width * mult);
	canvas.setAttribute('height', height * mult);
	let ctx = canvas.getContext('2d');
	ctx.fillRect(0, 0, width * mult, height * mult);

	for (let i = 0; i < width; i++) {
		for (let j = 0; j < height; j++) {
			if (Area[i][j] != 1) {
				ctx.clearRect(i * mult, j * mult, mult, mult);
			}
		}
		dungeonmap += "<br/>";
	}
	const node = document.getElementById('map');
	node.innerHTML = dungeonmap;
});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbInNyYy9jb21tYW5kcy5qcyIsInNyYy9tYWluLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlxuY29uc3Qgc2VuZENvbW1hbmQgPSBjb21tYW5kID0+IHtcblx0Ly9UT0RPIHNvY2tldCBzdHVmZiBmb3Igc2VuZGluZyBjb21tYW5kc1xuXHRjb25zb2xlLmxvZyhjb21tYW5kKTtcbn1cblxuY29uc3QgY3JlYXRlQ29tbWFuZCA9IGNoYXJOYW1lID0+IHtcblx0Ly97XCJjb21tYW5kXCI6IFwiY3JlYXRlXCIsIFwibmFtZVwiOiA8Y2hhck5hbWU+fVxuXHRyZXR1cm4gSlNPTi5zdHJpbmdpZnkoe2NvbW1hbmQ6IFwiY3JlYXRlXCIsIG5hbWU6IGNoYXJOYW1lfSlcbn1cblxuY29uc3QgbW92ZUNvbW1hbmQgPSAoQ2hhck5hbWUsIHgsIHkpID0+IHtcblx0Ly97XCJjb21tYW5kXCI6IFwibW92ZVwiLCBcIm5hbWVcIjogPGNoYXJOYW1lPiwgXCJkeFwiOiBbLTEsIDAsIDFdLCBcImR5XCI6IFstMSwgMCwgMV19XG5cdHJldHVybiBKU09OLnN0cmluZ2lmeSh7Y29tbWFuZDogXCJtb3ZlXCIsIG5hbWU6IENoYXJOYW1lLCBkeDogeCwgZHk6IHl9KTtcbn1cblxuY29uc3Qgc2NhbkNvbW1hbmQgPSBDaGFyTmFtZSA9PiB7XG5cdC8ve1wiY29tbWFuZFwiOiBcInNjYW5cIiwgXCJuYW1lXCI6IDxjaGFyTmFtZT59XG5cdHJldHVybiBKU09OLnN0cmluZ2lmeSh7Y29tbWFuZDogXCJzY2FuXCIsIG5hbWU6IENoYXJOYW1lfSk7XG59XG5cblxuXG4vLyBsaXN0ZW4gZm9yIHRoZSBcImtleXByZXNzXCIgZXZlbnRcbmRvY3VtZW50Lm9ua2V5cHJlc3MgPSBmdW5jdGlvbihlKSB7XG5cdGNvbnN0IGNoYXJDb2RlID0gKHR5cGVvZiBlLndoaWNoID09IFwibnVtYmVyXCIpID8gZS53aGljaCA6IGUua2V5Q29kZTtcblx0Y29uc3Qga2V5ID0gY2hhckNvZGU/IFN0cmluZy5mcm9tQ2hhckNvZGUoY2hhckNvZGUpIDogdW5kZWZpbmVkO1xuXHRsZXQgcGxheWVyTmFtZSA9ICdkdWNreSc7XG4gIFx0aWYgKGtleSA9PSAncScpIHtcblx0XHRzZW5kQ29tbWFuZChtb3ZlQ29tbWFuZChwbGF5ZXJOYW1lLCAtMSwgLTEpKVxuICBcdH0gZWxzZSBpZiAoa2V5ID09PSAndycpIHtcblx0XHRzZW5kQ29tbWFuZChtb3ZlQ29tbWFuZChwbGF5ZXJOYW1lLCAwLCAtMSkpXG4gIFx0fSBlbHNlIGlmIChrZXkgPT09ICdlJykge1xuXHRcdHNlbmRDb21tYW5kKG1vdmVDb21tYW5kKHBsYXllck5hbWUsIDEsIC0xKSlcbiAgXHR9IGVsc2UgaWYgKGtleSA9PT0gJ2EnKSB7XG5cdFx0c2VuZENvbW1hbmQobW92ZUNvbW1hbmQocGxheWVyTmFtZSwgLTEsIDApKVxuICBcdH0gZWxzZSBpZiAoa2V5ID09PSAnZCcpIHtcblx0XHRzZW5kQ29tbWFuZChtb3ZlQ29tbWFuZChwbGF5ZXJOYW1lLCAxLCAwKSlcbiAgXHR9IGVsc2UgaWYgKGtleSA9PT0gJ3onKSB7XG5cdFx0c2VuZENvbW1hbmQobW92ZUNvbW1hbmQocGxheWVyTmFtZSwgLTEsIDEpKVxuICBcdH0gZWxzZSBpZiAoa2V5ID09PSAneCcpIHtcblx0XHRzZW5kQ29tbWFuZChtb3ZlQ29tbWFuZChwbGF5ZXJOYW1lLCAwLCAxKSlcbiAgXHR9IGVsc2UgaWYgKGtleSA9PT0gJ2MnKSB7XG5cdFx0c2VuZENvbW1hbmQobW92ZUNvbW1hbmQocGxheWVyTmFtZSwgMSwgMSkpXG4gIFx0fSBlbHNlIGlmIChrZXkgPT09ICdzJykge1xuXHRcdHNlbmRDb21tYW5kKHNjYW5Db21tYW5kKHBsYXllck5hbWUpKVxuICBcdH0gZWxzZSBpZiAoa2V5ID09PSAnaycpIHtcblx0XHRzZW5kQ29tbWFuZChjcmVhdGVDb21tYW5kKHBsYXllck5hbWUpKVxuXHRcdGRyYXdEdWRlKHNlbmRDb21tYW5kKHNjYW5Db21tYW5kKHBsYXllck5hbWUpKSk7XG4gIFx0fSBcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgJy4vY29tbWFuZHMuanMnIFxuXG5jb25zdCBzdGF0dXNPSyA9IChyZXNwb25zZSkgPT4ge1xuXHRpZihyZXNwb25zZS5zdGF0dXMgPj0gMjAwICYmIHJlc3BvbnNlLnN0YXR1cyA8IDMwMCkge1xuXHRcdHJldHVybiByZXNwb25zZS5qc29uKCk7XG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KCk7XG5cdH1cbn07XG5cbmNvbnN0IGdldERhdGEgPSAodXJsKSA9PiB7XG5cdHJldHVybiBmZXRjaCh1cmwsIHtcblx0ICBcdG1ldGhvZDogXCJHRVRcIixcblx0ICBcdGhlYWRlcnM6IHtcblx0ICAgIFx0XCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCJcblx0ICBcdH1cblx0fSlcblx0LnRoZW4ocmVzcG9uc2UgPT4gc3RhdHVzT0socmVzcG9uc2UpKVxuXHQuY2F0Y2goZXJyb3IgPT4ge1xuXHQgICAgY29uc29sZS5sb2coYEVycm9yOiAke2Vycm9yfWApO1xuXHR9KTtcbn07XG5cbmNvbnN0IGRyYXdEdWRlID0gKHBvc2l0aW9uLCBtdWx0PTIwKSA9PiB7XG5cdGxldCBjYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKTtcblx0bGV0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuXHRjdHguZmlsbFN0eWxlID0gXCJyZWRcIjtcblx0Y29uc3QgW3gsIHldID0gcG9zaXRpb247XG5cdGN0eC5maWxsUmVjdCh4LCB5LCBtdWx0LCBtdWx0KTtcbn1cblxuZ2V0RGF0YSgnaHR0cDovL2xvY2FsaG9zdDozMDAwJylcbi50aGVuKGRhdGEgPT4ge1xuXHRsZXQgZHVuZ2Vvbm1hcCA9ICcnO1xuXHRjb25zdCB7QXJlYX0gPSBkYXRhO1xuXHRsZXQgY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIik7ICBcblx0Y29uc3Qgd2lkdGggPSBBcmVhLmxlbmd0aDtcblx0Y29uc3QgaGVpZ2h0ID0gQXJlYVsxXS5sZW5ndGg7XG5cdGNvbnN0IG11bHQgPSAyMDtcblx0Y2FudmFzLnNldEF0dHJpYnV0ZSgnd2lkdGgnLCB3aWR0aCptdWx0KTtcblx0Y2FudmFzLnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgaGVpZ2h0Km11bHQpO1xuXHRsZXQgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG5cdGN0eC5maWxsUmVjdCgwLCAwLCB3aWR0aCptdWx0LCBoZWlnaHQqbXVsdCk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHdpZHRoOyBpKyspIHtcblx0XHRmb3IgKGxldCBqID0gMDsgaiA8IGhlaWdodDsgaisrKSB7XG5cdFx0XHRpZihBcmVhW2ldW2pdICE9IDEpIHtcblx0XHRcdFx0Y3R4LmNsZWFyUmVjdChpKm11bHQsIGoqbXVsdCwgbXVsdCwgbXVsdCk7XG5cdFx0XHR9IFxuXHRcdH1cblx0XHRkdW5nZW9ubWFwICs9IFwiPGJyLz5cIjtcblx0fVxuICAgIGNvbnN0IG5vZGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFwJyk7XG4gICAgbm9kZS5pbm5lckhUTUwgPSBkdW5nZW9ubWFwO1xufSk7XG5cbiJdLCJuYW1lcyI6WyJzZW5kQ29tbWFuZCIsImNvbW1hbmQiLCJsb2ciLCJjcmVhdGVDb21tYW5kIiwiY2hhck5hbWUiLCJKU09OIiwic3RyaW5naWZ5IiwibmFtZSIsIm1vdmVDb21tYW5kIiwiQ2hhck5hbWUiLCJ4IiwieSIsImR4IiwiZHkiLCJzY2FuQ29tbWFuZCIsImRvY3VtZW50Iiwib25rZXlwcmVzcyIsImUiLCJjaGFyQ29kZSIsIndoaWNoIiwia2V5Q29kZSIsImtleSIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsInVuZGVmaW5lZCIsInBsYXllck5hbWUiLCJzdGF0dXNPSyIsInJlc3BvbnNlIiwic3RhdHVzIiwianNvbiIsIlByb21pc2UiLCJyZWplY3QiLCJnZXREYXRhIiwidXJsIiwiZmV0Y2giLCJ0aGVuIiwiY2F0Y2giLCJlcnJvciIsImRyYXdEdWRlIiwiZGF0YSIsImR1bmdlb25tYXAiLCJBcmVhIiwiY2FudmFzIiwiZ2V0RWxlbWVudEJ5SWQiLCJ3aWR0aCIsImxlbmd0aCIsImhlaWdodCIsIm11bHQiLCJzZXRBdHRyaWJ1dGUiLCJjdHgiLCJnZXRDb250ZXh0IiwiZmlsbFJlY3QiLCJpIiwiaiIsImNsZWFyUmVjdCIsIm5vZGUiLCJpbm5lckhUTUwiXSwibWFwcGluZ3MiOiI7OztBQUNBLE1BQU1BLGNBQWNDLFdBQVc7O1NBRXRCQyxHQUFSLENBQVlELE9BQVo7Q0FGRDs7QUFLQSxNQUFNRSxnQkFBZ0JDLFlBQVk7O1FBRTFCQyxLQUFLQyxTQUFMLENBQWUsRUFBQ0wsU0FBUyxRQUFWLEVBQW9CTSxNQUFNSCxRQUExQixFQUFmLENBQVA7Q0FGRDs7QUFLQSxNQUFNSSxjQUFjLENBQUNDLFFBQUQsRUFBV0MsQ0FBWCxFQUFjQyxDQUFkLEtBQW9COztRQUVoQ04sS0FBS0MsU0FBTCxDQUFlLEVBQUNMLFNBQVMsTUFBVixFQUFrQk0sTUFBTUUsUUFBeEIsRUFBa0NHLElBQUlGLENBQXRDLEVBQXlDRyxJQUFJRixDQUE3QyxFQUFmLENBQVA7Q0FGRDs7QUFLQSxNQUFNRyxjQUFjTCxZQUFZOztRQUV4QkosS0FBS0MsU0FBTCxDQUFlLEVBQUNMLFNBQVMsTUFBVixFQUFrQk0sTUFBTUUsUUFBeEIsRUFBZixDQUFQO0NBRkQ7OztBQVFBTSxTQUFTQyxVQUFULEdBQXNCLFVBQVNDLENBQVQsRUFBWTtPQUMzQkMsV0FBWSxPQUFPRCxFQUFFRSxLQUFULElBQWtCLFFBQW5CLEdBQStCRixFQUFFRSxLQUFqQyxHQUF5Q0YsRUFBRUcsT0FBNUQ7T0FDTUMsTUFBTUgsV0FBVUksT0FBT0MsWUFBUCxDQUFvQkwsUUFBcEIsQ0FBVixHQUEwQ00sU0FBdEQ7S0FDSUMsYUFBYSxPQUFqQjtLQUNNSixPQUFPLEdBQVgsRUFBZ0I7Y0FDTGIsWUFBWWlCLFVBQVosRUFBd0IsQ0FBQyxDQUF6QixFQUE0QixD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
